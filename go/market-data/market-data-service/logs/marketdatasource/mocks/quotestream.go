// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/ettec/otp-common/marketdata (interfaces: QuoteStream)

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	model "github.com/ettec/otp-common/model"
	gomock "github.com/golang/mock/gomock"
)

// MockQuoteStream is a mock of QuoteStream interface.
type MockQuoteStream struct {
	ctrl     *gomock.Controller
	recorder *MockQuoteStreamMockRecorder
}

// MockQuoteStreamMockRecorder is the mock recorder for MockQuoteStream.
type MockQuoteStreamMockRecorder struct {
	mock *MockQuoteStream
}

// NewMockQuoteStream creates a new mock instance.
func NewMockQuoteStream(ctrl *gomock.Controller) *MockQuoteStream {
	mock := &MockQuoteStream{ctrl: ctrl}
	mock.recorder = &MockQuoteStreamMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockQuoteStream) EXPECT() *MockQuoteStreamMockRecorder {
	return m.recorder
}

// Chan mocks base method.
func (m *MockQuoteStream) Chan() <-chan *model.ClobQuote {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Chan")
	ret0, _ := ret[0].(<-chan *model.ClobQuote)
	return ret0
}

// Chan indicates an expected call of Chan.
func (mr *MockQuoteStreamMockRecorder) Chan() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Chan", reflect.TypeOf((*MockQuoteStream)(nil).Chan))
}

// Close mocks base method.
func (m *MockQuoteStream) Close() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Close")
}

// Close indicates an expected call of Close.
func (mr *MockQuoteStreamMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockQuoteStream)(nil).Close))
}

// Subscribe mocks base method.
func (m *MockQuoteStream) Subscribe(arg0 int32) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Subscribe", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Subscribe indicates an expected call of Subscribe.
func (mr *MockQuoteStreamMockRecorder) Subscribe(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Subscribe", reflect.TypeOf((*MockQuoteStream)(nil).Subscribe), arg0)
}
